
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: |
          npm config set registry https://repo1.uhc.com/artifactory/api/npm/npm-virtual/
          npm install

      - name: Run Cypress Tests
        continue-on-error: true
        run: |
          npx cypress run || echo "‚ö†Ô∏è Cypress failed, but continuing workflow..."

      - name: Upload Cypress Artifacts (Screenshots, Videos, Reports)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/reports
            cypress/screenshots
            cypress/videos

      - name: Automation Summary
        id: automation-summary
        if: always()
        shell: bash
        run: |
          {
            start_time=$(date +%s)

            stats=$(jq -s 'reduce .[] as $item ({"passes":0,"failures":0,"pending":0,"skipped":0}; 
              .passes += ($item.stats.passes // 0) |
              .failures += ($item.stats.failures // 0) |
              .pending += ($item.stats.pending // 0) |
              .skipped += ($item.stats.skipped // 0))' cypress/reports/*.json)

            passed=$(echo $stats | jq '.passes')
            failed=$(echo $stats | jq '.failures')
            pending=$(echo $stats | jq '.pending')
            skipped=$(echo $stats | jq '.skipped')
            total=$((passed + failed + pending + skipped))

            end_time=$(date +%s)
            duration=$((end_time - start_time))
            mins=$((duration / 60))
            secs=$((duration % 60))

            status="‚úÖ All Passed"
            if [ "$failed" -gt 0 ]; then
              status="‚ùå Failures Detected"
            elif [ "$pending" -gt 0 ] || [ "$skipped" -gt 0 ]; then
              status="‚ö†Ô∏è Partial Execution"
            fi

            echo "# üß™‚ú® Cypress Automation Report ‚ú®üß™" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üö¶ Status: $status" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| üß™ **Total Tests** | $total |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚úÖ **Passed Tests** | $passed ‚úîÔ∏è |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùå **Failed Tests** | $failed ‚ùå |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚è∏Ô∏è **Pending Tests** | $pending ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
            echo "| üîï **Skipped Tests** | $skipped ‚ö†Ô∏è |" >> $GITHUB_STEP_SUMMARY
            echo "| üïí **Duration** | ${mins}m ${secs}s |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìÑ **HTML Report:** [View Report](https://orx-aim-ar.s3docs.optum.com/index.html)" >> $GITHUB_STEP_SUMMARY
            echo "üì∏ **Artifacts:** Cypress screenshots/videos attached" >> $GITHUB_STEP_SUMMARY
            echo "üî¢ Commit: \`$(git rev-parse --short HEAD)\`" >> $GITHUB_STEP_SUMMARY
            echo "üßë‚Äçüíª Author: $(git log -1 --pretty=format:'%an')" >> $GITHUB_STEP_SUMMARY
            echo "üìÜ Date: $(git log -1 --date=short --pretty=format:'%cd')" >> $GITHUB_STEP_SUMMARY
          } || echo "‚ö†Ô∏è Summary step encountered issues but continued."

      - name: Deploy to the object storage bucket
        if: always()
        uses: uhg-pipelines/epl-microsite/deploy/3docs@dcf44c3b4e36255e9888076c90966f8b38aab3ea
        with:
          bucket-name: orx-cat-ar
          build-directory: ./cypress/reports
          aws-secret-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}

      - name: (Optional) Fail Pipeline If Tests Failed
        if: failure()
        run: exit 1
